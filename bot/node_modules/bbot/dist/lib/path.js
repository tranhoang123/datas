"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const bot = __importStar(require(".."));
class Path {
    constructor(init = {}) {
        this.scope = (init.scope) ? init.scope : 'global';
        this.listen = (init.listen) ? Object.assign({}, init.listen) : {};
        this.understand = (init.understand) ? Object.assign({}, init.understand) : {};
        this.serve = (init.serve) ? Object.assign({}, init.serve) : {};
        this.act = (init.act) ? Object.assign({}, init.act) : {};
    }
    forced(collection) {
        for (let id in this[collection]) {
            if (!this[collection][id].force)
                delete this[collection][id];
        }
        return Object.keys(this[collection]).length;
    }
    add(branch, collection) {
        this[collection][branch.id] = branch;
        return branch.id;
    }
    reset() {
        this.listen = {};
        this.understand = {};
        this.act = {};
    }
    text(condition, action, options) {
        return this.add(new bot.TextBranch(condition, action, options), 'listen');
    }
    direct(condition, action, options) {
        return this.add(new bot.TextDirectBranch(condition, action, options), 'listen');
    }
    custom(matcher, action, options) {
        return this.add(new bot.CustomBranch(matcher, action, options), 'listen');
    }
    catchAll(action, options) {
        return this.add(new bot.CatchAllBranch(action, options), 'act');
    }
    NLU(criteria, action, options) {
        return this.add(new bot.NaturalLanguageBranch(criteria, action, options), 'understand');
    }
    directNLU(criteria, action, options) {
        return this.add(new bot.NaturalLanguageDirectBranch(criteria, action, options), 'understand');
    }
    customNLU(matcher, action, options) {
        return this.add(new bot.CustomBranch(matcher, action, options), 'understand');
    }
    enter(action, options) {
        return this.custom((message) => {
            return message instanceof bot.EnterMessage;
        }, action, options);
    }
    leave(action, options) {
        return this.custom((message) => {
            return message instanceof bot.LeaveMessage;
        }, action, options);
    }
    topic(action, options) {
        return this.custom((message) => {
            return message instanceof bot.TopicMessage;
        }, action, options);
    }
    server(criteria, action, options) {
        return this.add(new bot.ServerBranch(criteria, action, options), 'serve');
    }
}
exports.Path = Path;
exports.global = new Path();
