"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const bot = __importStar(require(".."));
class Message {
    constructor(user, id = bot.random()) {
        this.id = id;
        this.user = (user instanceof bot.User) ? user : new bot.User(user);
    }
    clone() {
        return Object.assign(Object.create(this), this);
    }
}
exports.Message = Message;
class NullMessage extends Message {
    constructor() {
        super(new bot.User({ id: 'null-user' }));
    }
    toString() {
        return '';
    }
}
exports.NullMessage = NullMessage;
class TextMessage extends Message {
    constructor(user, text, id) {
        super(user, id);
        this.text = text;
    }
    toString() {
        return this.text;
    }
}
exports.TextMessage = TextMessage;
class RichMessage extends Message {
    constructor(user, payload, id) {
        super(user, id);
        this.payload = payload;
    }
    toString() {
        return JSON.stringify(this.payload);
    }
}
exports.RichMessage = RichMessage;
class EventMessage extends Message {
    toString() {
        return `${this.event} message for ${this.user.name}`;
    }
}
exports.EventMessage = EventMessage;
class EnterMessage extends EventMessage {
    constructor() {
        super(...arguments);
        this.event = 'enter';
    }
}
exports.EnterMessage = EnterMessage;
class LeaveMessage extends EventMessage {
    constructor() {
        super(...arguments);
        this.event = 'leave';
    }
}
exports.LeaveMessage = LeaveMessage;
class TopicMessage extends EventMessage {
    constructor() {
        super(...arguments);
        this.event = 'topic';
    }
}
exports.TopicMessage = TopicMessage;
class ServerMessage extends EventMessage {
    constructor(options) {
        super(bot.userById(options.userId, {
            room: (options.roomId) ? { id: options.roomId } : {}
        }), options.id);
        this.event = 'request';
        this.data = options.data || {};
        bot.logger.debug(`[message] server request keys: ${Object.keys(this.data).join(', ')}`);
    }
    toString() {
        return `Data for user ${this.user.id}: ${JSON.stringify(this.data)}`;
    }
}
exports.ServerMessage = ServerMessage;
class CatchAllMessage extends Message {
    constructor(message) {
        super(message.user, message.id);
        this.message = message;
    }
    toString() {
        return this.message.toString();
    }
}
exports.CatchAllMessage = CatchAllMessage;
