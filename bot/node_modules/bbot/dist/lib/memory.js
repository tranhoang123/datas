"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const bot = __importStar(require(".."));
exports.deepClone = (obj) => JSON.parse(JSON.stringify(obj));
exports.intervals = { save: { value: 5000 } };
class Memory {
    constructor() {
        this.users = {};
        this.private = {};
    }
    toObject() {
        return bot.store.plainObject(this);
    }
    clear() {
        for (let key of Object.keys(exports.memory))
            delete exports.memory[key];
        this.users = {};
        this.private = {};
    }
    save() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!bot.adapters.storage)
                return;
            this.clearSaveInterval();
            yield bot.adapters.storage.saveMemory(exports.memory);
            this.setSaveInterval();
        });
    }
    load() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!bot.adapters.storage) {
                bot.logger.warn(`[memory] cannot load or persist data without storage adapter.`);
                return;
            }
            const loaded = yield bot.adapters.storage.loadMemory();
            for (let key in loaded) {
                this[key] = Object.assign({}, this[key], loaded[key]);
            }
        });
    }
    setSaveInterval(newInterval) {
        if (newInterval)
            exports.intervals.save.value = newInterval;
        if (!bot.adapters.storage || !bot.settings.get('autoSave'))
            return;
        exports.intervals.save.timer = global.setInterval(() => this.save(), exports.intervals.save.value);
    }
    get(key, collection = 'private') {
        return this[collection][key];
    }
    unset(key, collection = 'private') {
        delete exports.memory[collection][key];
        return bot;
    }
    clearSaveInterval() {
        if (exports.intervals.save.timer)
            global.clearInterval(exports.intervals.save.timer);
    }
    set(key, value, collection = 'private') {
        const data = exports.deepClone(value);
        if (!this[collection])
            this[collection] = {};
        this[collection][key] = data;
        bot.events.emit('loaded', this);
        return bot;
    }
    start() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!bot.adapters.storage)
                return;
            yield this.load();
            this.setSaveInterval();
            if (bot.settings.get('auto-save')) {
                const sec = (exports.intervals.save.value / 1000).toFixed(2);
                bot.logger.info(`[memory] auto save is enabled, every ${sec} seconds.`);
            }
        });
    }
    shutdown() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.save();
            this.clearSaveInterval();
            bot.logger.info(`[memory] saving is disabled`);
        });
    }
}
exports.Memory = Memory;
exports.memory = new Memory();
function userById(id, meta) {
    let user = exports.memory.users[id];
    if (!user)
        user = new bot.User(Object.assign({}, { id }, meta));
    if (meta)
        for (let key of Object.keys(meta))
            user[key] = meta[key];
    exports.memory.users[id] = user;
    return user;
}
exports.userById = userById;
function usersByName(name) {
    let users = [];
    for (let id in exports.memory.users) {
        let user = exports.memory.users[id];
        if (user.name && user.name.toLowerCase() === name.toLowerCase()) {
            users.push(user);
        }
    }
    return users;
}
exports.usersByName = usersByName;
function users() {
    return exports.memory.users;
}
exports.users = users;
