export interface INaturalLanguageResult {
    id?: string;
    name?: string;
    score?: number;
    [key: string]: any;
}
export interface INaturalLanguageCriteria extends INaturalLanguageResult {
    operator?: 'in' | 'is' | 'match' | 'max' | 'min' | 'eq' | 'gte' | 'gt' | 'lt' | 'lte';
}
export declare class NaturalLanguageResult extends Array<INaturalLanguageResult> {
    indexIncludes(index: number, criteria: INaturalLanguageCriteria): INaturalLanguageResult | undefined;
    sortByScore(): void;
    match(criteria: INaturalLanguageCriteria): INaturalLanguageResult[] | undefined;
    add(...results: INaturalLanguageResult[]): this;
}
export declare enum NLUKey {
    intent = 0,
    entities = 1,
    sentiment = 2,
    tone = 3,
    phrases = 4,
    act = 5,
    language = 6
}
export declare type NLUKeys = keyof typeof NLUKey;
export declare type NaturalLanguageCriteria = {
    [key in NLUKeys]?: INaturalLanguageCriteria;
};
export declare type NaturalLanguageResultsRaw = {
    [key in NLUKeys]?: INaturalLanguageResult[];
};
export declare type NaturalLanguageResults = {
    [key in NLUKeys]?: NaturalLanguageResult;
};
export declare class NLU {
    results: NaturalLanguageResults;
    addResult(key: NLUKeys, ...results: INaturalLanguageResult[]): this;
    addResults(results: NaturalLanguageResultsRaw): this;
    matchCriteria(key: NLUKeys, criteria: INaturalLanguageCriteria): INaturalLanguageResult[] | undefined;
    matchAllCriteria(criteria: NaturalLanguageCriteria): NaturalLanguageResultsRaw | undefined;
    printResults(): string;
}
