"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bot = __importStar(require(".."));
const koa_1 = __importDefault(require("koa"));
const koa_body_1 = __importDefault(require("koa-body"));
const koa_router_1 = __importDefault(require("koa-router"));
const http_1 = __importDefault(require("http"));
const https_1 = __importDefault(require("https"));
class Server {
    constructor() {
        this.enabled = bot.settings.get('use-server');
        this.secure = bot.settings.get('server-secure');
    }
    load() {
        if (!this.enabled)
            return;
        this.app = new koa_1.default();
        this.router = new koa_router_1.default();
        this.messageRouter = new koa_router_1.default();
        this.app.use(koa_body_1.default());
        this.app.use((ctx, next) => __awaiter(this, void 0, void 0, function* () {
            const start = new Date().getTime();
            yield next();
            const ms = new Date().getTime() - start;
            bot.logger.info(`[server] served ${ctx.method} ${ctx.url} - ${ms}ms`);
            ctx.set('X-Response-Time', `${ms}ms`);
        }));
        this.app.on('error', (err) => bot.logger.error(`[server] ${err}`));
        this.messageRoutes();
        this.publicRoutes();
    }
    messageRoutes() {
        if (!this.messageRouter)
            return;
        this.messageRouter.post('/:userId/:roomId*', (ctx) => __awaiter(this, void 0, void 0, function* () {
            const message = new bot.ServerMessage({
                userId: ctx.params.userId,
                roomId: ctx.params.roomId,
                data: ctx.request.body
            });
            yield bot.serve(message, ctx);
            if (!ctx.body)
                ctx.body = message.id;
        }));
        this.messageRouter.get('/:userId/:roomId*', (ctx) => __awaiter(this, void 0, void 0, function* () {
            const message = new bot.ServerMessage({
                userId: ctx.params.userId,
                roomId: ctx.params.roomId,
                data: ctx.query
            });
            yield bot.serve(message, ctx);
            if (!ctx.body)
                ctx.body = message.id;
        }));
    }
    publicRoutes() {
        if (!this.router)
            return;
        this.router.get('/public', (ctx) => __awaiter(this, void 0, void 0, function* () {
            ctx.body = this.publicStats();
        }));
    }
    start() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.app || !this.router)
                return;
            if (this.messageRouter)
                this.router.use('/message', this.messageRouter.routes());
            this.app.use(this.router.routes());
            this.app.use(this.router.allowedMethods());
            this.server = (this.secure)
                ? https_1.default.createServer({}, this.app.callback())
                : http_1.default.createServer(this.app.callback());
            yield this.listen(parseInt(bot.settings.get('server-port'), 10));
            bot.logger.info(`[server] listening, see public stats: ${this.url()}/public`);
            this.server.on('error', (err) => bot.logger.error(`[server] ${err}`));
        });
    }
    listen(port) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.server) {
                bot.logger.error(`[server] listen before server created`);
                return;
            }
            else if (this.server.listening) {
                bot.logger.error(`[server] already listening at ${this.url()}`);
                return;
            }
            yield new Promise((resolve) => {
                this.server.once('error', (err) => {
                    if (err.code === 'EADDRINUSE') {
                        bot.logger.info(`[server] Port ${port} in use, retrying on ${port + 1}`);
                        this.server.close();
                        this.listen(port + 1).catch();
                    }
                });
                this.server.listen(port, bot.settings.get('server-host'));
                this.server.once('listening', () => {
                    this.info = this.server.address();
                    this.started = new Date();
                    resolve();
                });
            });
        });
    }
    shutdown() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.server)
                this.server.close();
        });
    }
    url() {
        if (!this.info)
            return '[server disabled]';
        const protocol = this.secure ? 'https' : 'http';
        const { address, port } = this.info;
        return `${protocol}://${address}:${port}`;
    }
    publicStats() {
        return {
            name: bot.settings.name,
            started: this.started,
            adapters: Object.keys(bot.adapters).map((key) => {
                return bot.adapters[key].name;
            }),
            middleware: Object.keys(bot.middlewares).map((key) => {
                return `${key}: ${bot.middlewares[key].stack.length}`;
            })
        };
    }
}
exports.Server = Server;
exports.server = new Server();
