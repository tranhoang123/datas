import * as bot from '..';
export interface IPiece {
    (state: bot.State, next: (done?: IPieceDone) => Promise<void>, done: IPieceDone): Promise<any> | any;
}
export interface IPieceDone {
    (newDone?: IPieceDone): any;
}
export interface IComplete {
    (state: bot.State): any;
}
export declare class Middleware {
    type: string;
    stack: IPiece[];
    constructor(type?: string);
    register(piece: IPiece): void;
    execute(state: bot.State | bot.IState, complete: IComplete): Promise<bot.State>;
}
export declare class Middlewares {
    [key: string]: any;
    message?: Middleware;
    nlu?: Middleware;
    storage?: Middleware;
    constructor();
    load(): void;
    unload(): void;
}
export declare const middlewares: bot.Middlewares;
export interface IRegisterMiddleware {
    (middlewarePiece: IPiece): void;
}
export declare const middleware: {
    [type: string]: IRegisterMiddleware;
};
