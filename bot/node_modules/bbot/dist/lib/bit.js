"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const bot = __importStar(require(".."));
exports.bits = {};
class Bit {
    constructor(options) {
        this.id = (options.id) ? options.id : bot.counter('bit');
        for (let key of Object.keys(options))
            this[key] = options[key];
        if (!this.strings && !this.attach && !this.callback) {
            bot.logger.warn(`[bit] won't work without a strings, attach or callback attribute.`);
        }
    }
    execute(b) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.callback)
                yield Promise.resolve(this.callback(b));
        });
    }
}
exports.Bit = Bit;
function setupBit(options) {
    const bit = new Bit(options);
    exports.bits[bit.id] = bit;
    return bit.id;
}
exports.setupBit = setupBit;
function doBit(id, b) {
    return __awaiter(this, void 0, void 0, function* () {
        const bit = exports.bits[id];
        if (!bit) {
            bot.logger.error('[bit] attempted to do bit with unknown ID');
            return;
        }
        yield Promise.resolve(bit.execute(b));
        return;
    });
}
exports.doBit = doBit;
