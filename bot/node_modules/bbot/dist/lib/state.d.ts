import * as bot from '..';
export interface IState {
    done?: boolean;
    exit?: boolean;
    sequence?: string;
    scope?: string;
    branch?: bot.Branch;
    server?: bot.IServerContext;
    [key: string]: any;
}
export interface IReceiveState extends IState {
    message: bot.Message;
}
export interface IDispatchState extends IState {
    envelopes?: bot.Envelope[];
}
export declare class State implements IState {
    bot: typeof bot;
    done: boolean;
    processed: {
        [key: string]: number;
    };
    message: bot.Message;
    branches?: bot.Branch[];
    envelopes?: bot.Envelope[];
    sequence?: string;
    scope?: string;
    method?: string;
    exit?: boolean;
    [key: string]: any;
    constructor(startingState: IDispatchState);
    clone(): bot.State;
    inspect(): string;
    ignore(): this;
    finish(): this;
    setBranch(branch: bot.Branch): void;
    branch: bot.Branch | undefined;
    getBranch(id?: number | string): bot.Branch | undefined;
    readonly match: any;
    readonly conditions: any;
    readonly matched: boolean;
    pendingEnvelope(): bot.Envelope | undefined;
    readonly user: bot.User;
    dispatchedEnvelope(): bot.Envelope | undefined;
    respondEnvelope(options?: bot.IEnvelope): bot.Envelope;
    readonly envelope: bot.Envelope;
    respond(...content: any[]): Promise<bot.State>;
    reply(...content: any[]): Promise<bot.State>;
    respondVia(method: string, ...content: any[]): Promise<bot.State>;
}
