"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const bot = __importStar(require(".."));
class State {
    constructor(startingState) {
        this.bot = bot;
        this.done = false;
        this.processed = {};
        this.message = new bot.NullMessage();
        for (let key in startingState)
            this[key] = startingState[key];
    }
    clone() {
        return new State(this);
    }
    inspect() {
        const clone = Object.assign({}, this);
        delete clone.bot;
        return JSON.stringify(clone, null, 2);
    }
    ignore() {
        bot.logger.debug(`[state] ignored by further thought processes`);
        this.exit = true;
        return this;
    }
    finish() {
        this.done = true;
        return this;
    }
    setBranch(branch) {
        if (!branch.matched)
            return;
        if (!this.branches)
            this.branches = [];
        this.branches.push(branch);
    }
    set branch(branch) {
        if (branch)
            this.setBranch(branch);
    }
    getBranch(id) {
        if (!this.branches)
            return undefined;
        if (!id)
            id = this.branches.length - 1;
        return (typeof id === 'number' && this.branches.length > id)
            ? this.branches[id]
            : this.branches.find((branch) => branch.id === id);
    }
    get branch() {
        return this.getBranch();
    }
    get match() {
        const branch = this.getBranch();
        if (branch)
            return branch.match;
    }
    get conditions() {
        const branch = this.getBranch();
        if (branch && branch.conditions)
            return branch.conditions;
    }
    get matched() {
        return (this.branches && this.branches.length) ? true : false;
    }
    pendingEnvelope() {
        if (!this.envelopes)
            return;
        return this.envelopes.find((e) => typeof e.responded === 'undefined');
    }
    get user() {
        const user = this.message.user;
        return bot.userById(user.id, user);
    }
    dispatchedEnvelope() {
        if (!this.envelopes)
            return;
        return this.envelopes.find((e) => typeof e.responded !== 'undefined');
    }
    respondEnvelope(options) {
        let pending = this.pendingEnvelope();
        if (!pending) {
            if (!this.envelopes)
                this.envelopes = [];
            pending = new bot.Envelope(options, this);
            this.envelopes.push(pending);
        }
        return pending;
    }
    get envelope() {
        return this.respondEnvelope();
    }
    respond(...content) {
        this.respondEnvelope().compose(...content);
        return bot.respond(this);
    }
    reply(...content) {
        for (let i in content) {
            if (typeof content[i] === 'string') {
                content[i] = `@${this.message.user.name} ${content[i]}`;
            }
        }
        return this.respond(...content);
    }
    respondVia(method, ...content) {
        this.respondEnvelope().via(method);
        return this.respond(...content);
    }
}
exports.State = State;
