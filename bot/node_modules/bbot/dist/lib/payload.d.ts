export interface IPayload {
    attachments?: IAttachment[];
    actions?: IAction[];
    quickReplies?: IQuickReply[];
}
export interface IAttachment {
    [key: string]: any;
    fallback: string;
    color?: string;
    collapsed?: boolean;
    pretext?: string;
    title?: IRichText;
    footer?: IRichText;
    description?: string;
    author?: IAuthor;
    thumbUrl?: string;
    image?: string;
    audio?: string;
    video?: string;
    fields?: IAttachmentField[];
}
export interface IAuthor {
    name: string;
    link?: string;
    icon?: string;
}
export interface IRichText {
    text: string;
    link?: string;
    icon?: string;
}
export interface IAttachmentField {
    short?: boolean;
    title: string;
    value: string;
}
export interface IAction {
    [key: string]: any;
    name: string;
    type: string;
    text: string;
    style?: string;
    value?: string;
    confirm?: IConfirm;
}
export interface IConfirm {
    [key: string]: any;
    title?: string;
    text?: string;
    ok: string;
    dismiss: string;
}
export interface IQuickReply {
    [key: string]: any;
    text: string;
    type?: string;
    content?: any;
    url?: string;
    image?: string;
}
export declare class Payload implements IPayload {
    [key: string]: any;
    attachments?: IAttachment[];
    actions?: IAction[];
    quickReplies?: IQuickReply[];
    constructor(meta?: IPayload);
    custom(object: any): void;
    attachment(attachment: IAttachment): this;
    action(action: IAction): this;
    quickReply(quickReply: IQuickReply): this;
    toObject(): IPayload;
}
