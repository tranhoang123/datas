import * as bot from '..';
export interface IEnvelope {
    method?: string;
    room?: {
        id?: string;
        name?: string;
    };
    user?: bot.User;
    strings?: string[];
    payload?: bot.IPayload | any;
    branchId?: string;
    responded?: number;
}
export declare class Envelope implements IEnvelope {
    id: string;
    method: string;
    room: {
        id?: string;
        name?: string;
        type?: string;
    };
    user?: bot.User;
    message?: bot.Message;
    strings?: string[];
    branchId?: string;
    responded?: number;
    _payload?: bot.Payload;
    constructor(options?: IEnvelope, b?: bot.State);
    toRoomId(id: string): this;
    toRoomName(name: string): this;
    toUser(user: bot.User): this;
    write(...strings: string[]): this;
    readonly payload: bot.Payload;
    attach(attachment: bot.IAttachment): this;
    compose(...content: Array<string | bot.IAttachment>): this;
    via(method: string): this;
}
