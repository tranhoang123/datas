export declare enum ConditionKey {
    is = 0,
    starts = 1,
    ends = 2,
    contains = 3,
    excludes = 4,
    after = 5,
    before = 6,
    range = 7
}
export declare type ConditionKeys = keyof typeof ConditionKey;
export declare type Condition = {
    [key in ConditionKeys]?: string | string[];
};
export declare type ConditionCollection = {
    [key: string]: Condition;
};
export interface IConditionOptions {
    [key: string]: any;
    matchWord?: boolean;
    ignoreCase?: boolean;
    ignorePunctuation?: boolean;
}
export declare class Expression {
    fromString(str: string): RegExp;
    escape(str: string): string;
    fromCondition(condition: Condition, options?: IConditionOptions): RegExp;
}
export declare const expression: Expression;
export declare class Conditions {
    config: IConditionOptions;
    expressions: {
        [key: string]: RegExp;
    };
    matches: {
        [key: string]: any;
        [key: number]: any;
    };
    captures: {
        [key: string]: string | undefined;
        [key: number]: string | undefined;
    };
    constructor(condition?: string | RegExp | Condition | Condition[] | ConditionCollection, options?: IConditionOptions);
    add(condition: string | RegExp | Condition, key?: string | number): this;
    exec(str: string): {
        [key: string]: any;
        [key: number]: any;
    };
    readonly success: boolean;
    readonly match: any;
    readonly matched: any;
    readonly captured: string | {
        [key: string]: string | undefined;
        [key: number]: string | undefined;
    } | undefined;
    clear(): void;
    clearAll(): void;
}
