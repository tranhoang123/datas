import * as bot from '..';
export interface IMatcher {
    (input: any): Promise<any> | any;
}
export interface IBranchCallback {
    (b: bot.State): any;
}
export interface IBranchDone {
    (matched: boolean): void;
}
export interface IBranch {
    id?: string;
    force?: boolean;
    [key: string]: any;
}
export declare abstract class Branch {
    id: string;
    callback: IBranchCallback;
    force: boolean;
    match?: any;
    matched?: boolean;
    [key: string]: any;
    constructor(action: IBranchCallback | string, options?: IBranch);
    abstract matcher(input: any): Promise<any>;
    process(b: bot.State, middleware: bot.Middleware, done?: IBranchDone): Promise<bot.State>;
}
export declare class CatchAllBranch extends Branch {
    constructor(action: IBranchCallback | string, options?: IBranch);
    matcher(message: bot.Message): Promise<bot.CatchAllMessage | undefined>;
}
export declare class CustomBranch extends Branch {
    customMatcher: IMatcher;
    constructor(customMatcher: IMatcher, action: IBranchCallback | string, options?: IBranch);
    matcher(message: bot.Message): Promise<any>;
}
export declare class TextBranch extends Branch {
    conditions: bot.Conditions;
    constructor(conditions: string | RegExp | bot.Condition | bot.Condition[] | bot.ConditionCollection | bot.Conditions, callback: IBranchCallback | string, options?: IBranch);
    matcher(message: bot.Message): Promise<any>;
}
export declare class TextDirectBranch extends TextBranch {
    matcher(message: bot.TextMessage): Promise<any>;
}
export declare class NaturalLanguageBranch extends Branch {
    criteria: bot.NaturalLanguageCriteria;
    match: bot.NaturalLanguageResultsRaw | undefined;
    constructor(criteria: bot.NaturalLanguageCriteria, callback: IBranchCallback | string, options?: IBranch);
    matcher(message: bot.TextMessage): Promise<bot.NaturalLanguageResultsRaw | undefined>;
}
export declare class NaturalLanguageDirectBranch extends NaturalLanguageBranch {
    matcher(message: bot.TextMessage): Promise<bot.NaturalLanguageResultsRaw | undefined>;
}
export interface IServerBranchCriteria {
    [path: string]: any;
}
export declare class ServerBranch extends Branch {
    criteria: IServerBranchCriteria;
    match: any;
    constructor(criteria: IServerBranchCriteria, callback: IBranchCallback | string, options?: IBranch);
    matcher(message: bot.ServerMessage): Promise<{
        [path: string]: any;
    } | undefined>;
}
export declare function directPattern(): RegExp;
export declare function directPatternCombined(regex: RegExp): RegExp;
