"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const bot = __importStar(require(".."));
class Envelope {
    constructor(options, b) {
        this.id = bot.random();
        this.method = 'send';
        this.room = {};
        if (b) {
            this.message = b.message;
            this.user = b.message.user;
            this.room = b.message.user.room;
        }
        if (options) {
            if (options.user)
                this.user = options.user;
            if (options.room)
                this.room = options.room;
            else if (options.user)
                this.room = options.user.room;
            if (options.strings)
                this.strings = options.strings;
            if (options.payload)
                this._payload = new bot.Payload(options.payload);
            if (options.method)
                this.method = options.method;
        }
    }
    toRoomId(id) {
        this.room.id = id;
        delete this.room.name;
        return this;
    }
    toRoomName(name) {
        this.room.name = name;
        delete this.room.id;
        return this;
    }
    toUser(user) {
        this.user = user;
        if (this.user.room)
            this.room = this.user.room;
        return this;
    }
    write(...strings) {
        if (!this.strings)
            this.strings = [];
        this.strings = this.strings.concat(strings);
        return this;
    }
    get payload() {
        if (!this._payload)
            this._payload = new bot.Payload();
        return this._payload;
    }
    attach(attachment) {
        this.payload.attachment(attachment);
        return this;
    }
    compose(...content) {
        for (let part of content) {
            if (typeof part === 'string')
                this.write(part);
            else
                this.attach(part);
        }
        return this;
    }
    via(method) {
        this.method = method;
        return this;
    }
}
exports.Envelope = Envelope;
