import * as bot from '..';
export interface IThought {
    name: string;
    b: bot.State;
    validate?: () => Promise<boolean> | boolean;
    action?: (success: boolean) => Promise<void> | void;
    branches?: {
        [id: string]: bot.Branch;
    };
    middleware?: bot.Middleware;
}
export declare class Thought implements IThought {
    name: string;
    b: bot.State;
    validate: () => Promise<boolean> | boolean;
    action: (success: boolean) => Promise<void> | void;
    middleware: bot.Middleware;
    branches?: {
        [id: string]: bot.Branch;
    };
    constructor(options: IThought);
    process(): Promise<void>;
}
export declare class Thoughts {
    b: bot.State | bot.State;
    path: bot.Path;
    sequence: {
        [key: string]: string[];
    };
    processes: {
        [key: string]: bot.Thought;
    };
    constructor(state: bot.State, path?: bot.Path);
    start(sequence: string): Promise<bot.State>;
}
export declare function receive(message: bot.Message, path?: bot.Path): Promise<bot.State>;
export declare function respond(b: bot.State): Promise<bot.State>;
export declare function dispatch(envelope: bot.Envelope): Promise<bot.State>;
export declare function serve(message: bot.ServerMessage, context: bot.IServerContext, path?: bot.Path): Promise<bot.State>;
