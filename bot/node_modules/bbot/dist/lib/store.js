"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const bot = __importStar(require(".."));
class Store {
    constructor() {
        this.excludes = ['bot', 'server'];
    }
    plainObject(data) {
        if (typeof data === 'object') {
            data = bot.deepClone(Object.keys(data)
                .filter((key) => !this.excludes.includes(key))
                .reduce((obj, key) => {
                if (typeof obj[key] !== 'function')
                    obj[key] = data[key];
                return obj;
            }, {}));
        }
        return data;
    }
    keep(collection, data) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!bot.adapters.storage)
                return;
            yield bot.adapters.storage.keep(collection, this.plainObject(data));
        });
    }
    find(collection, params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!bot.adapters.storage) {
                throw new Error('Storage `find` called without storage adapter');
            }
            return bot.adapters.storage.find(collection, params);
        });
    }
    findOne(collection, params) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!bot.adapters.storage) {
                throw new Error('Storage `findOne` called without storage adapter');
            }
            return bot.adapters.storage.findOne(collection, params);
        });
    }
    lose(collection, params) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!bot.adapters.storage) {
                throw new Error('Storage `lose` without storage adapter');
            }
            yield bot.adapters.storage.lose(collection, params);
        });
    }
}
exports.Store = Store;
exports.store = new Store();
