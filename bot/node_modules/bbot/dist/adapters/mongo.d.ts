import * as bBot from '..';
import mongoose from 'mongoose';
export interface IStore extends mongoose.Document {
    type: string;
    sub: string;
    data: any;
}
export declare function getModel(collection: string): mongoose.Model<mongoose.Document>;
export declare class Mongo extends bBot.StorageAdapter {
    name: string;
    config: {
        useNewUrlParser: boolean;
        autoIndex: boolean;
        reconnectTries: number;
        reconnectInterval: number;
        poolSize: number;
        keepAlive: number;
    };
    model: mongoose.Model<mongoose.Document>;
    store?: mongoose.Mongoose;
    private static instance;
    static getInstance(bot: typeof bBot): Mongo;
    constructor(bot: typeof bBot);
    start(): Promise<void>;
    shutdown(): Promise<void>;
    saveMemory(data: any): Promise<void>;
    loadMemory(): Promise<any>;
    keep(sub: string, data: any): Promise<void>;
    find(sub: string, params: any): Promise<any>;
    findOne(sub: string, params: any): Promise<any>;
    lose(sub: string, params: any): Promise<void>;
}
export declare const use: (bot: any) => Mongo;
