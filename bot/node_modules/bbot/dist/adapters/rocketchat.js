"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const bBot = __importStar(require(".."));
const sdk = __importStar(require("@rocket.chat/sdk"));
class Rocketchat extends bBot.MessageAdapter {
    constructor(bot) {
        super(bot);
        this.name = 'rocketchat-message-adapter';
        this.driver = sdk.driver;
        this.methodCache = sdk.methodCache;
        this.api = sdk.api;
        this.settings = sdk.settings;
        this.getRoomId = (room) => this.driver.getRoomId(room);
        this.callMethod = (method, ...args) => this.driver.callMethod(method, args);
        this.settings.integrationId = 'bBot';
        if (this.settings.username !== this.bot.settings.name)
            this.bot.settings.alias = this.settings.username;
    }
    static getInstance(bot) {
        if (!Rocketchat.instance)
            Rocketchat.instance = new Rocketchat(bot);
        return Rocketchat.instance;
    }
    start() {
        return __awaiter(this, void 0, void 0, function* () {
            this.bot.logger.info(`[rocketchat] responds to name: ${this.bot.settings.name}`);
            if (this.bot.settings.alias)
                this.bot.logger.info(`[rocketchat] responds to alias: ${this.bot.settings.alias}`);
            this.driver.useLog(this.bot.logger);
            yield this.driver.connect();
            yield this.driver.login();
            yield this.driver.subscribeToMessages();
            yield this.driver.respondToMessages(this.process.bind(this));
            this.bot.logger.debug(`[rocketchat] connected via DDP`);
        });
    }
    shutdown() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.driver.disconnect();
        });
    }
    process(err, message, meta) {
        if (err)
            throw err;
        this.bot.logger.info('[rocketchat] filters passed, will hear message');
        const isDM = (meta.roomType === 'd');
        const isLC = (meta.roomType === 'l');
        const user = this.bot.userById(message.u._id, {
            fullName: message.u.name,
            name: message.u.username,
            room: {
                id: message.rid,
                type: meta.roomType,
                name: meta.roomName
            }
        });
        if (message.t === 'uj') {
            this.bot.logger.debug('[rocketchat] hear type EnterMessage');
            return this.bot.receive(new bBot.EnterMessage(user, message._id));
        }
        if (message.t === 'ul') {
            this.bot.logger.debug('[rocketchat] hear type LeaveMessage');
            return this.bot.receive(new bBot.LeaveMessage(user, message._id));
        }
        const startOfText = (message.msg.indexOf('@') === 0) ? 1 : 0;
        const robotIsNamed = message.msg.indexOf(this.bot.settings.name) === startOfText || message.msg.indexOf(this.bot.settings.alias) === startOfText;
        if ((isDM || isLC) && !robotIsNamed)
            message.msg = `${this.bot.settings.name} ${message.msg}`;
        if (Array.isArray(message.attachments) && message.attachments.length) {
            this.bot.logger.debug('[rocketchat] hear type RichMessage');
            return this.bot.receive(new bBot.RichMessage(user, {
                attachments: message.attachments,
                text: message.text
            }, message._id));
        }
        let textMessage = new bBot.TextMessage(user, message.msg, message._id);
        this.bot.logger.debug(`[rocketchat] hear type TextMessage: ${textMessage.toString()}`);
        return this.bot.receive(textMessage);
    }
    format(input) {
        return input.replace(/((?:^|\s):\w+)-(\w+:(?:$|\s))/g, '$1_$2');
    }
    parseEnvelope(envelope, roomId) {
        const messages = [];
        const attachments = [];
        const actions = [];
        if (envelope.strings) {
            for (let text of envelope.strings) {
                messages.push(this.driver.prepareMessage(this.format(text), roomId));
            }
        }
        if (envelope.payload && Array.isArray(envelope.payload.attachments)) {
            for (let attachment of envelope.payload.attachments) {
                attachments.push(this.parseSchema(attachment, {
                    'text': 'pretext',
                    'thumb_url': 'thumbUrl',
                    'author_name': 'author.name',
                    'author_link': 'author.link',
                    'author_icon': 'author.icon',
                    'title': 'title.text',
                    'title_link': 'title.link',
                    'image_url': 'image',
                    'audio_url': 'audio',
                    'video_url': 'video'
                }, attachment));
            }
        }
        if (envelope.payload && Array.isArray(envelope.payload.quickReplies)) {
            for (let qr of envelope.payload.quickReplies) {
                const defaults = {
                    is_webview: true,
                    webview_height_ratio: 'full',
                    button_alignment: 'vertical',
                    temporary_buttons: false
                };
                const schema = {
                    'msg': 'content',
                    'image_url': 'image'
                };
                if (qr.text && !qr.url && !qr.msg)
                    qr.msg = qr.text;
                if (qr.msg)
                    defaults.msg_in_chat_window = true;
                const action = this.parseSchema(qr, schema, qr);
                actions.push(Object.assign(defaults, action));
            }
        }
        if (actions.length) {
            if (attachments.length === 1) {
                attachments[0].actions = actions;
            }
            else {
                attachments.push({ actions });
            }
        }
        if (attachments.length) {
            if (messages.length === 1) {
                messages[0].attachments = attachments;
            }
            else {
                messages.push(this.driver.prepareMessage({
                    rid: roomId || envelope.room.id || null,
                    attachments
                }, roomId));
            }
        }
        for (let i in messages) {
            messages[i].bot = { i: this.settings.integrationId };
        }
        return messages;
    }
    dispatch(envelope) {
        return __awaiter(this, void 0, void 0, function* () {
            switch (envelope.method) {
                case 'send':
                    if (!envelope.room || !envelope.room.id) {
                        throw new Error('Sending without room ID');
                    }
                    for (let message of this.parseEnvelope(envelope)) {
                        yield this.driver.sendToRoomId(message, envelope.room.id);
                    }
                    break;
                case 'dm':
                    if (!envelope.strings)
                        throw new Error('DM without strings');
                    if (!envelope.user)
                        throw new Error('DM without user');
                    for (let message of this.parseEnvelope(envelope)) {
                        yield this.driver.sendDirectToUser(message, envelope.user.username);
                    }
                    break;
                case 'reply':
                    if (!envelope.user)
                        throw new Error('Reply without user');
                    if (!envelope.room || !envelope.room.id)
                        throw new Error('Reply without room ID');
                    if (envelope.room.id.indexOf(envelope.user.id) === -1 && envelope.strings) {
                        envelope.strings = envelope.strings.map((s) => `@${envelope.user.username} ${s}`);
                    }
                    for (let message of this.parseEnvelope(envelope)) {
                        yield this.driver.sendToRoomId(message, envelope.room.id);
                    }
                    break;
                case 'react':
                    if (!envelope.strings)
                        throw new Error('React without string');
                    if (!envelope.message)
                        throw new Error('React without message');
                    for (let reaction of envelope.strings) {
                        if (!reaction.startsWith(':'))
                            reaction = `:${reaction}`;
                        if (!reaction.endsWith(':'))
                            reaction = `${reaction}:`;
                        reaction = reaction.replace('-', '_');
                        yield this.driver.setReaction(reaction, envelope.message.id);
                    }
                    break;
                default:
                    throw new Error(`Rocket.Chat adapter has no ${envelope.method} handler`);
            }
        });
    }
}
exports.Rocketchat = Rocketchat;
exports.use = (bot) => Rocketchat.getInstance(bot);
