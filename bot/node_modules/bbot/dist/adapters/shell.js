"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bBot = __importStar(require(".."));
const winston_transport_1 = __importDefault(require("winston-transport"));
const inquirer = __importStar(require("inquirer"));
const chalk_1 = __importDefault(require("chalk"));
class Shell extends bBot.MessageAdapter {
    constructor(bot) {
        super(bot);
        this.name = 'shell-message-adapter';
        this.debug = false;
        this.logs = [''];
        this.messages = [];
        this.line = new inquirer.Separator();
    }
    static getInstance(bot) {
        if (!Shell.instance)
            Shell.instance = new Shell(bot);
        return Shell.instance;
    }
    render() {
        return __awaiter(this, void 0, void 0, function* () {
            let _ = '\n';
            let n = '           ';
            _ += chalk_1.default.cyan('╔═════════════════════════════════════════════════════════▶') + '\n';
            for (let m of this.messages.slice(-this.bot.settings.get('shell-size'))) {
                _ += chalk_1.default.cyan(`║${n.substr(0, n.length - m[0].length) + m[0]} ┆ `) + m[1] + '\n';
            }
            _ += chalk_1.default.cyan('╚═════════════════════════════════════════════════════════▶') + '\n\n';
            this.ui.updateBottomBar(_);
            yield this.prompt();
        });
    }
    logSetup() {
        this.bot.logger.debug('[shell] Re-routing logs to shell UI from here...');
        class ShellTransport extends winston_transport_1.default {
        }
        this.transport = new ShellTransport();
        this.transport.log = this.log.bind(this);
        const consoleLogger = this.bot.logger.transports.find((t) => t.name === 'console');
        if (consoleLogger)
            this.bot.logger.remove(consoleLogger);
        this.bot.logger.add(this.transport);
    }
    log(logEvent, callback) {
        if (this.ui) {
            const { message, level } = logEvent;
            let item = `${level}: ${message}`;
            switch (level) {
                case 'debug':
                    item = chalk_1.default.gray(item);
                    break;
                case 'warn':
                    item = chalk_1.default.magenta(item);
                    break;
                case 'error': item = chalk_1.default.red(item);
            }
            this.ui.log.write(item.trim());
        }
        callback();
    }
    start() {
        return __awaiter(this, void 0, void 0, function* () {
            this.bot.settings.extend({
                'shell-user-name': {
                    type: 'string',
                    description: 'Pre-filled username for user in shell chat session.'
                },
                'shell-user-id': {
                    type: 'string',
                    description: 'ID to persist shell user data (or set as "random").',
                    default: 'shell-user-01'
                },
                'shell-room-name': {
                    type: 'string',
                    description: 'Name for "room" of shell chat session.'
                },
                'shell-size': {
                    type: 'number',
                    description: 'Number of message lines to display in shell chat.',
                    default: 5
                }
            });
            this.ui = new inquirer.ui.BottomBar();
            this.bot.global.enter((b) => b.respond(`${this.user.name} Welcome to #${this.room.name}, I'm ${b.bot.settings.get('name')}`, `Type "exit" to exit any time.`), { id: 'shell-enter' });
            this.bot.global.text(/^exit$/i, (b) => b.bot.shutdown(1), { id: 'shell-exit' });
            this.bot.events.on('started', () => __awaiter(this, void 0, void 0, function* () {
                if (!this.debug) {
                    this.logSetup();
                    yield this.roomSetup();
                    yield this.bot.receive(new this.bot.EnterMessage(this.user));
                    yield this.render();
                }
                this.bot.events.emit('shell-started');
            }));
        });
    }
    roomSetup() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.bot.settings.get('shell-user-name') ||
                !this.bot.settings.get('shell-room-name')) {
                const registration = yield inquirer.prompt([{
                        type: 'input',
                        name: 'username',
                        message: 'Welcome! What shall I call you?',
                        default: 'user'
                    }, {
                        type: 'input',
                        name: 'userId',
                        message: 'Use ID for user - enter "random" to generate',
                        default: 'random'
                    }, {
                        type: 'input',
                        name: 'room',
                        message: 'And what about this "room"?',
                        default: 'shell'
                    }]);
                if (registration.userId !== 'random') {
                    this.bot.settings.set('shell-user-id', registration.userId);
                }
                this.bot.settings.set('shell-user-name', registration.username);
                this.bot.settings.set('shell-room-name', registration.room);
            }
            this.user = new this.bot.User({
                name: this.bot.settings.get('shell-user-name'),
                id: this.bot.settings.get('shell-user-id')
            });
            this.room = { name: this.bot.settings.get('shell-room-name') };
        });
    }
    prompt() {
        return __awaiter(this, void 0, void 0, function* () {
            const input = yield inquirer.prompt({
                type: 'input',
                name: 'message',
                message: chalk_1.default.magenta(`#${this.room.name}`) + chalk_1.default.cyan(' ➤')
            });
            this.messages.push([this.user.name, input.message]);
            yield this.bot.receive(new this.bot.TextMessage(this.user, input.message));
            return this.render();
        });
    }
    dispatch(envelope) {
        return __awaiter(this, void 0, void 0, function* () {
            for (let text of (envelope.strings || [])) {
                if (text)
                    this.messages.push([this.bot.settings.name, text]);
            }
            for (let attachment of (envelope.payload.attachments || [])) {
                if (attachment && attachment.fallback) {
                    this.messages.push([this.bot.settings.name, attachment.fallback]);
                }
            }
            if (envelope.payload.quickReplies) {
                this.messages.push([
                    this.bot.settings.name,
                    `[${envelope.payload.quickReplies.map((qr) => qr.text).join('], [')}]`
                ]);
            }
        });
    }
    shutdown() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.ui)
                this.ui.close();
        });
    }
}
exports.Shell = Shell;
exports.use = (bot) => Shell.getInstance(bot);
